{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Builder = require(\"../Builder\");\n\nexports.default = function (_ref) {\n  var dx = _ref.dx,\n      dy = _ref.dy,\n      start = _ref.start,\n      end = _ref.end,\n      _ref$scale = _ref.scale,\n      scale = _ref$scale === undefined ? 1 : _ref$scale;\n\n  if (!start) {\n    start = [dx, dy];\n  } else {\n    start = [-end[0] + start[0], -end[1] + start[1]];\n  }\n\n  if (!end) {\n    end = [0, 0];\n  }\n\n  var x1 = end[0],\n      y1 = end[1];\n  var size = 10 * scale;\n  var angleOffset = 16 / 180 * Math.PI;\n  var angle = Math.atan(start[1] / start[0]);\n\n  if (start[0] < 0) {\n    angle += Math.PI;\n  }\n\n  var data = [[x1, y1], [Math.cos(angle + angleOffset) * size + x1, Math.sin(angle + angleOffset) * size + y1], [Math.cos(angle - angleOffset) * size + x1, Math.sin(angle - angleOffset) * size + y1], [x1, y1]]; //TODO add in reverse\n  // if (canvasContext.arrowReverse){\n  //   data = [[x1, y1],\n  //   [Math.cos(angle + angleOffset)*size, Math.sin(angle + angleOffset)*size],\n  //   [Math.cos(angle - angleOffset)*size, Math.sin(angle - angleOffset)*size],\n  //   [x1, y1]\n  //   ]\n  // } else {\n  //   data = [[x1, y1],\n  //   [Math.cos(angle + angleOffset)*size, Math.sin(angle + angleOffset)*size],\n  //   [Math.cos(angle - angleOffset)*size, Math.sin(angle - angleOffset)*size],\n  //   [x1, y1]\n  //   ]\n  // }\n\n  return {\n    components: [(0, _Builder.lineBuilder)({\n      data: data,\n      className: \"connector-end connector-arrow\",\n      classID: \"connector-end\"\n    })]\n  };\n};","map":{"version":3,"sources":["/home/pranava/Desktop/network_visualiser/node_modules/viz-annotation/lib/Connector/end-arrow.js"],"names":["Object","defineProperty","exports","value","_Builder","require","default","_ref","dx","dy","start","end","_ref$scale","scale","undefined","x1","y1","size","angleOffset","Math","PI","angle","atan","data","cos","sin","components","lineBuilder","className","classID"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;;AAIA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAtB;;AAEAH,OAAO,CAACI,OAAR,GAAkB,UAAUC,IAAV,EAAgB;AAChC,MAAIC,EAAE,GAAGD,IAAI,CAACC,EAAd;AAAA,MACIC,EAAE,GAAGF,IAAI,CAACE,EADd;AAAA,MAEIC,KAAK,GAAGH,IAAI,CAACG,KAFjB;AAAA,MAGIC,GAAG,GAAGJ,IAAI,CAACI,GAHf;AAAA,MAIIC,UAAU,GAAGL,IAAI,CAACM,KAJtB;AAAA,MAKIA,KAAK,GAAGD,UAAU,KAAKE,SAAf,GAA2B,CAA3B,GAA+BF,UAL3C;;AAOA,MAAI,CAACF,KAAL,EAAY;AACVA,IAAAA,KAAK,GAAG,CAACF,EAAD,EAAKC,EAAL,CAAR;AACD,GAFD,MAEO;AACLC,IAAAA,KAAK,GAAG,CAAC,CAACC,GAAG,CAAC,CAAD,CAAJ,GAAUD,KAAK,CAAC,CAAD,CAAhB,EAAqB,CAACC,GAAG,CAAC,CAAD,CAAJ,GAAUD,KAAK,CAAC,CAAD,CAApC,CAAR;AACD;;AACD,MAAI,CAACC,GAAL,EAAU;AACRA,IAAAA,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAN;AACD;;AAED,MAAII,EAAE,GAAGJ,GAAG,CAAC,CAAD,CAAZ;AAAA,MACIK,EAAE,GAAGL,GAAG,CAAC,CAAD,CADZ;AAGA,MAAIM,IAAI,GAAG,KAAKJ,KAAhB;AACA,MAAIK,WAAW,GAAG,KAAK,GAAL,GAAWC,IAAI,CAACC,EAAlC;AACA,MAAIC,KAAK,GAAGF,IAAI,CAACG,IAAL,CAAUZ,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAA1B,CAAZ;;AAEA,MAAIA,KAAK,CAAC,CAAD,CAAL,GAAW,CAAf,EAAkB;AAChBW,IAAAA,KAAK,IAAIF,IAAI,CAACC,EAAd;AACD;;AAED,MAAIG,IAAI,GAAG,CAAC,CAACR,EAAD,EAAKC,EAAL,CAAD,EAAW,CAACG,IAAI,CAACK,GAAL,CAASH,KAAK,GAAGH,WAAjB,IAAgCD,IAAhC,GAAuCF,EAAxC,EAA4CI,IAAI,CAACM,GAAL,CAASJ,KAAK,GAAGH,WAAjB,IAAgCD,IAAhC,GAAuCD,EAAnF,CAAX,EAAmG,CAACG,IAAI,CAACK,GAAL,CAASH,KAAK,GAAGH,WAAjB,IAAgCD,IAAhC,GAAuCF,EAAxC,EAA4CI,IAAI,CAACM,GAAL,CAASJ,KAAK,GAAGH,WAAjB,IAAgCD,IAAhC,GAAuCD,EAAnF,CAAnG,EAA2L,CAACD,EAAD,EAAKC,EAAL,CAA3L,CAAX,CA5BgC,CA8BhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAO;AACLU,IAAAA,UAAU,EAAE,CAAC,CAAC,GAAGtB,QAAQ,CAACuB,WAAb,EAA0B;AACrCJ,MAAAA,IAAI,EAAEA,IAD+B;AAErCK,MAAAA,SAAS,EAAE,+BAF0B;AAGrCC,MAAAA,OAAO,EAAE;AAH4B,KAA1B,CAAD;AADP,GAAP;AAOD,CApDD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Builder = require(\"../Builder\");\n\nexports.default = function (_ref) {\n  var dx = _ref.dx,\n      dy = _ref.dy,\n      start = _ref.start,\n      end = _ref.end,\n      _ref$scale = _ref.scale,\n      scale = _ref$scale === undefined ? 1 : _ref$scale;\n\n  if (!start) {\n    start = [dx, dy];\n  } else {\n    start = [-end[0] + start[0], -end[1] + start[1]];\n  }\n  if (!end) {\n    end = [0, 0];\n  }\n\n  var x1 = end[0],\n      y1 = end[1];\n\n  var size = 10 * scale;\n  var angleOffset = 16 / 180 * Math.PI;\n  var angle = Math.atan(start[1] / start[0]);\n\n  if (start[0] < 0) {\n    angle += Math.PI;\n  }\n\n  var data = [[x1, y1], [Math.cos(angle + angleOffset) * size + x1, Math.sin(angle + angleOffset) * size + y1], [Math.cos(angle - angleOffset) * size + x1, Math.sin(angle - angleOffset) * size + y1], [x1, y1]];\n\n  //TODO add in reverse\n  // if (canvasContext.arrowReverse){\n  //   data = [[x1, y1],\n  //   [Math.cos(angle + angleOffset)*size, Math.sin(angle + angleOffset)*size],\n  //   [Math.cos(angle - angleOffset)*size, Math.sin(angle - angleOffset)*size],\n  //   [x1, y1]\n  //   ]\n  // } else {\n  //   data = [[x1, y1],\n  //   [Math.cos(angle + angleOffset)*size, Math.sin(angle + angleOffset)*size],\n  //   [Math.cos(angle - angleOffset)*size, Math.sin(angle - angleOffset)*size],\n  //   [x1, y1]\n  //   ]\n  // }\n\n  return {\n    components: [(0, _Builder.lineBuilder)({\n      data: data,\n      className: \"connector-end connector-arrow\",\n      classID: \"connector-end\"\n    })]\n  };\n};"]},"metadata":{},"sourceType":"script"}