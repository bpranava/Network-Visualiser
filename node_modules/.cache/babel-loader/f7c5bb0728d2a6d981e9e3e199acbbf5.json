{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/pranava/Desktop/network_visualiser/src/MapChart.js\";\nimport React from \"react\";\nimport { networkData } from \"./component/data/data\";\nimport { ComposableMap, Geographies, Geography, Marker, Annotation } from \"react-simple-maps\";\nimport { AnnotationLabel } from \"react-annotation\";\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\"; // function annotFunction(e){\n// const labels = networkData.map((data, key) => {\n//     return (\n//         <Annotation\n//             key = {key}\n//             subject={data.coordinate}\n//             dx={0}\n//             dy={0}\n//             connectorProps={{\n//             stroke: \"#000000\",\n//             strokeWidth: 1,\n//             strokeLinecap: \"round\"\n//             }}\n//         >\n//                 <text x=\"-8\" textAnchor=\"middle\" alignmentBaseline=\"middle\" fill=\"#000000\">\n//                     {\"Data Usage: \"+data.data}\n//                 </text>\n//         </Annotation>\n//         );\n//     });\n//     return ({labels});\n// };\n\nconst MapChart = () => {\n  return /*#__PURE__*/_jsxDEV(ComposableMap, {\n    children: [/*#__PURE__*/_jsxDEV(Geographies, {\n      geography: geoUrl,\n      children: ({\n        geographies\n      }) => geographies.map(geo => /*#__PURE__*/_jsxDEV(Geography, {\n        geography: geo,\n        fill: \"#DDD\"\n      }, geo.rsmKey, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), networkData.map((data, key) => {\n      return /*#__PURE__*/_jsxDEV(Marker, {\n        coordinates: data.coordinate,\n        stroke: \"0077b3\",\n        children: /*#__PURE__*/_jsxDEV(\"circle\", {\n          r: 8,\n          fill: \"#00aaff\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this);\n    }), networkData.map((data, key) => {\n      return /*#__PURE__*/_jsxDEV(Annotation, {\n        subject: data.coordinate,\n        dx: 0,\n        dy: 0,\n        connectorProps: {\n          stroke: \"#000000\",\n          strokeWidth: 1,\n          strokeLinecap: \"round\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Data Usage: \" + data.data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this)\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 7\n  }, this);\n};\n\n_c = MapChart;\nexport default MapChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapChart\");","map":{"version":3,"sources":["/home/pranava/Desktop/network_visualiser/src/MapChart.js"],"names":["React","networkData","ComposableMap","Geographies","Geography","Marker","Annotation","AnnotationLabel","geoUrl","MapChart","geographies","map","geo","rsmKey","data","key","coordinate","stroke","strokeWidth","strokeLinecap"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SACEC,aADF,EAEEC,WAFF,EAGEC,SAHF,EAIEC,MAJF,EAKEC,UALF,QAMO,mBANP;AAQA,SAASC,eAAT,QAAgC,kBAAhC;AAEA,MAAMC,MAAM,GACV,wGADF,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACrB,sBACI,QAAC,aAAD;AAAA,4BACE,QAAC,WAAD;AAAa,MAAA,SAAS,EAAED,MAAxB;AAAA,gBACC,CAAC;AAACE,QAAAA;AAAD,OAAD,KACGA,WAAW,CAACC,GAAZ,CAAgBC,GAAG,iBACf,QAAC,SAAD;AAEI,QAAA,SAAS,EAAEA,GAFf;AAGI,QAAA,IAAI,EAAC;AAHT,SACSA,GAAG,CAACC,MADb;AAAA;AAAA;AAAA;AAAA,cADJ;AAFJ;AAAA;AAAA;AAAA;AAAA,YADF,EAaGZ,WAAW,CAACU,GAAZ,CAAgB,CAACG,IAAD,EAAOC,GAAP,KAAe;AAC5B,0BACA,QAAC,MAAD;AAAkB,QAAA,WAAW,EAAED,IAAI,CAACE,UAApC;AAAgD,QAAA,MAAM,EAAC,QAAvD;AAAA,+BACQ;AAAQ,UAAA,CAAC,EAAE,CAAX;AAAc,UAAA,IAAI,EAAC;AAAnB;AAAA;AAAA;AAAA;AAAA;AADR,SAAaD,GAAb;AAAA;AAAA;AAAA;AAAA,cADA;AAMH,KAPA,CAbH,EAsBGd,WAAW,CAACU,GAAZ,CAAgB,CAACG,IAAD,EAAOC,GAAP,KAAe;AACxB,0BACI,QAAC,UAAD;AAEI,QAAA,OAAO,EAAED,IAAI,CAACE,UAFlB;AAGI,QAAA,EAAE,EAAE,CAHR;AAII,QAAA,EAAE,EAAE,CAJR;AAKI,QAAA,cAAc,EAAE;AAChBC,UAAAA,MAAM,EAAE,SADQ;AAEhBC,UAAAA,WAAW,EAAE,CAFG;AAGhBC,UAAAA,aAAa,EAAE;AAHC,SALpB;AAAA,+BAYI;AAAA,oBACG,iBAAeL,IAAI,CAACA;AADvB;AAAA;AAAA;AAAA;AAAA;AAZJ,SACWC,GADX;AAAA;AAAA;AAAA;AAAA,cADJ;AAoBP,KArBA,CAtBH;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmDD,CApDD;;KAAMN,Q;AAsDN,eAAeA,QAAf","sourcesContent":["import React from \"react\";\nimport { networkData } from \"./component/data/data\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n  Annotation\n} from \"react-simple-maps\";\n\nimport { AnnotationLabel } from \"react-annotation\";\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\n// function annotFunction(e){\n// const labels = networkData.map((data, key) => {\n//     return (\n//         <Annotation\n//             key = {key}\n//             subject={data.coordinate}\n//             dx={0}\n//             dy={0}\n//             connectorProps={{\n//             stroke: \"#000000\",\n//             strokeWidth: 1,\n//             strokeLinecap: \"round\"\n//             }}\n//         >\n//                 <text x=\"-8\" textAnchor=\"middle\" alignmentBaseline=\"middle\" fill=\"#000000\">\n//                     {\"Data Usage: \"+data.data}\n//                 </text>\n\n//         </Annotation>\n//         );\n//     });\n    \n//     return ({labels});\n// };\n\nconst MapChart = () => {\n  return (\n      <ComposableMap>\n        <Geographies geography={geoUrl}>\n        {({geographies}) => \n            geographies.map(geo => (\n                <Geography \n                    key={geo.rsmKey} \n                    geography={geo}\n                    fill=\"#DDD\"\n                    \n                />\n            ))\n        }\n        </Geographies>\n        {networkData.map((data, key) => {\n            return (\n            <Marker key={key} coordinates={data.coordinate} stroke=\"0077b3\">           \n                    <circle r={8} fill=\"#00aaff\"/>\n             \n            </Marker>\n            );\n        })}\n\n        {networkData.map((data, key) => {\n                return (\n                    <Annotation\n                        key = {key}\n                        subject={data.coordinate}\n                        dx={0}\n                        dy={0}\n                        connectorProps={{\n                        stroke: \"#000000\",\n                        strokeWidth: 1,\n                        strokeLinecap: \"round\"\n                        }}\n                    >\n                      \n                        <p>\n                          {\"Data Usage: \"+data.data}\n                        </p>\n                                          \n            \n                    </Annotation>\n                    );\n        })}\n        \n    \n       \n        \n      </ComposableMap>\n  );\n};\n\nexport default MapChart;\n"]},"metadata":{},"sourceType":"module"}