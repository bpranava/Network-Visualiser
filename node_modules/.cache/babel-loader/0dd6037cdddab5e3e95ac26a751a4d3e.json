{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import React,{memo}from\"react\";import{networkData}from\"./component/data/data\";import\"./MapChart.css\";import{ComposableMap,ZoomableGroup,Geographies,Geography,Marker}from\"react-simple-maps\";var geoUrl=\"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";var MapChart=function MapChart(_ref){var setTooltipContent=_ref.setTooltipContent;return/*#__PURE__*/_jsx(ComposableMap,{\"data-tip\":\"\",children:/*#__PURE__*/_jsxs(ZoomableGroup,{center:[0,0],children:[/*#__PURE__*/_jsx(Geographies,{geography:geoUrl,children:function children(_ref2){var geographies=_ref2.geographies;return geographies.map(function(geography){return/*#__PURE__*/_jsx(Geography,{geography:geography,fill:\"#DDD\",stroke:\"#FFF\"},geography.rsmKey);});}}),networkData.map(function(data,key){var radius;var fillcolor=\"#bbe0f9\";var strokeColor=\"#6dc0fd\";{if(data.data<100){radius=7;}else if(data.data>=100&&data.data<300){radius=10;fillcolor=\"#99c2ff\";strokeColor=\"#5b92fe\";}else if(data.data>=300&&data.data<500){radius=14;fillcolor=\"#9cb3e3\";strokeColor=\"#6154cb\";}else if(data.data>500){radius=20;fillcolor=\"#8080ff\";strokeColor=\"#000099\";}}return/*#__PURE__*/_jsx(Marker,{coordinates:data.coordinate,onMouseEnter:function onMouseEnter(){setTooltipContent(\"Location: \"+data.region+\" |  Data Usage: \"+data.data);},onMouseLeave:function onMouseLeave(){setTooltipContent(\"\");},children:/*#__PURE__*/_jsx(\"circle\",{r:radius,fill:fillcolor,stroke:strokeColor})},key);})]})});};export default/*#__PURE__*/memo(MapChart);","map":{"version":3,"sources":["/home/pranava/Documents/network_visualiser/src/MapChart.js"],"names":["React","memo","networkData","ComposableMap","ZoomableGroup","Geographies","Geography","Marker","geoUrl","MapChart","setTooltipContent","geographies","map","geography","rsmKey","data","key","radius","fillcolor","strokeColor","coordinate","region"],"mappings":"wFAAA,MAAOA,CAAAA,KAAP,EAAgBC,IAAhB,KAA4B,OAA5B,CACA,OAASC,WAAT,KAA4B,uBAA5B,CACA,MAAO,gBAAP,CAEA,OACEC,aADF,CAEEC,aAFF,CAGEC,WAHF,CAIEC,SAJF,CAKEC,MALF,KAMO,mBANP,CAQA,GAAMC,CAAAA,MAAM,CACV,wGADF,CAGA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAA2B,IAAxBC,CAAAA,iBAAwB,MAAxBA,iBAAwB,CAC1C,mBACE,KAAC,aAAD,EAAe,WAAS,EAAxB,uBACE,MAAC,aAAD,EAAe,MAAM,CAAE,CAAC,CAAD,CAAI,CAAJ,CAAvB,wBACE,KAAC,WAAD,EAAa,SAAS,CAAEF,MAAxB,UACG,4BAAGG,CAAAA,WAAH,OAAGA,WAAH,OACCA,CAAAA,WAAW,CAACC,GAAZ,CAAgB,SAAAC,SAAS,qBACvB,KAAC,SAAD,EAEE,SAAS,CAAEA,SAFb,CAGE,IAAI,CAAC,MAHP,CAIE,MAAM,CAAC,MAJT,EACOA,SAAS,CAACC,MADjB,CADuB,EAAzB,CADD,EADH,EADF,CAcGZ,WAAW,CAACU,GAAZ,CAAgB,SAACG,IAAD,CAAOC,GAAP,CAAe,CAC9B,GAAIC,CAAAA,MAAJ,CACA,GAAIC,CAAAA,SAAS,CAAG,SAAhB,CACA,GAAIC,CAAAA,WAAW,CAAG,SAAlB,CAEE,CACE,GAAGJ,IAAI,CAACA,IAAL,CAAU,GAAb,CAAiB,CACfE,MAAM,CAAG,CAAT,CACD,CAFD,IAEM,IAAGF,IAAI,CAACA,IAAL,EAAW,GAAX,EAAkBA,IAAI,CAACA,IAAL,CAAU,GAA/B,CAAmC,CACvCE,MAAM,CAAG,EAAT,CACAC,SAAS,CAAG,SAAZ,CACAC,WAAW,CAAG,SAAd,CACD,CAJK,IAIC,IAAGJ,IAAI,CAACA,IAAL,EAAW,GAAX,EAAkBA,IAAI,CAACA,IAAL,CAAU,GAA/B,CAAmC,CACxCE,MAAM,CAAG,EAAT,CACAC,SAAS,CAAG,SAAZ,CACAC,WAAW,CAAG,SAAd,CAED,CALM,IAKD,IAAGJ,IAAI,CAACA,IAAL,CAAU,GAAb,CAAiB,CACrBE,MAAM,CAAG,EAAT,CACAC,SAAS,CAAG,SAAZ,CACAC,WAAW,CAAG,SAAd,CAED,CACF,CAED,mBACE,KAAC,MAAD,EAEA,WAAW,CAAEJ,IAAI,CAACK,UAFlB,CAGA,YAAY,CAAE,uBAAM,CAClBV,iBAAiB,CAAC,aAAcK,IAAI,CAACM,MAAnB,CAA4B,kBAA5B,CAAgDN,IAAI,CAACA,IAAtD,CAAjB,CACD,CALD,CAMA,YAAY,CAAE,uBAAM,CAClBL,iBAAiB,CAAC,EAAD,CAAjB,CACD,CARD,uBAUA,eACE,CAAC,CAAEO,MADL,CAEE,IAAI,CAAIC,SAFV,CAGE,MAAM,CAAIC,WAHZ,EAVA,EACOH,GADP,CADF,CAkBH,CA3CA,CAdH,GADF,EADF,CAgED,CAjED,CAmEA,2BAAef,IAAI,CAACQ,QAAD,CAAnB","sourcesContent":["import React, { memo } from \"react\";\nimport { networkData } from \"./component/data/data\";\nimport \"./MapChart.css\";\n\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n  Marker\n} from \"react-simple-maps\";\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst MapChart = ({ setTooltipContent }) => {\n  return (\n    <ComposableMap data-tip=''>\n      <ZoomableGroup center={[0, 0]}>\n        <Geographies geography={geoUrl}>\n          {({ geographies }) =>\n            geographies.map(geography => (\n              <Geography \n                key={geography.rsmKey} \n                geography={geography}\n                fill=\"#DDD\"\n                stroke=\"#FFF\"\n              />\n            ))\n          }\n        </Geographies>\n\n        {networkData.map((data, key) => {\n          var radius;\n          var fillcolor = \"#bbe0f9\";\n          var strokeColor = \"#6dc0fd\"\n\n            {\n              if(data.data<100){\n                radius = 7;\n              }else if(data.data>=100 && data.data<300){\n                radius = 10;\n                fillcolor = \"#99c2ff\";\n                strokeColor = \"#5b92fe\";\n              } else if(data.data>=300 && data.data<500){\n                radius = 14;\n                fillcolor = \"#9cb3e3\";\n                strokeColor = \"#6154cb\";\n\n              }else if(data.data>500){\n                radius = 20;\n                fillcolor = \"#8080ff\";\n                strokeColor = \"#000099\";\n\n              }\n            }\n\n            return (\n              <Marker\n              key = {key}\n              coordinates={data.coordinate}\n              onMouseEnter={() => {\n                setTooltipContent(\"Location: \"+ data.region + \" |  Data Usage: \"+ data.data);\n              }}\n              onMouseLeave={() => {\n                setTooltipContent(\"\");\n              }}\n            >\n              <circle\n                r={radius}\n                fill = {fillcolor}\n                stroke = {strokeColor}            \n              />\n            </Marker>\n            );\n        })}\n        \n      </ZoomableGroup>\n    </ComposableMap>\n  );\n};\n\nexport default memo(MapChart);\n"]},"metadata":{},"sourceType":"module"}