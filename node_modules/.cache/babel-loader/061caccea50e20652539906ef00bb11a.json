{"ast":null,"code":"import React, { useState, useEffect } from 'react';\n\nvar PathTooltip = function PathTooltip(props) {\n  // set initial state\n  var _useState = useState(true),\n      hidden = _useState[0],\n      setHidden = _useState[1];\n\n  var _useState2 = useState({\n    x: 0,\n    y: 0,\n    w: 0,\n    h: 0,\n    isLeft: false,\n    isTop: false\n  }),\n      tooltipRect = _useState2[0],\n      setTooltipRect = _useState2[1];\n\n  var _useState3 = useState(props[\"fontSize\"] || 12),\n      fontSize = _useState3[0];\n\n  var _useState4 = useState(props[\"fontFamily\"] || \"sans-serif\"),\n      fontFamily = _useState4[0];\n\n  var _useState5 = useState(props[\"bgColor\"] || \"black\"),\n      bgColor = _useState5[0];\n\n  var _useState6 = useState(props[\"textColor\"] || \"white\"),\n      textColor = _useState6[0];\n\n  var pathRef = props.pathRef;\n  var svgRef = props.svgRef;\n  var textRef = React.createRef(); // use effect to handle mouse over and mouse leave\n\n  useEffect(function () {\n    var updateTooltip = function updateTooltip(e) {\n      if (svgRef && pathRef && textRef && svgRef.current && pathRef.current && textRef.current) {\n        var svgRect = svgRef.current.getBoundingClientRect();\n        var textRect = textRef.current.getBoundingClientRect();\n        var isLeft = e.x - svgRect.x > svgRect.width / 2;\n        var isTop = e.y - svgRect.y > svgRect.height / 2;\n        var w = textRect.width + 20;\n        var h = textRect.height + 20;\n        var x = isLeft ? e.x - svgRect.x + 8 - w : e.x - svgRect.x - 8;\n        var y = isTop ? e.y - svgRect.y - 12 - h : e.y - svgRect.y + 8;\n        setTooltipRect({\n          x: x,\n          y: y,\n          w: w,\n          h: h,\n          isLeft: isLeft,\n          isTop: isTop\n        });\n      }\n    };\n\n    if (pathRef && pathRef.current) {\n      pathRef.current.addEventListener('mouseover', function () {\n        setHidden(false);\n      });\n      pathRef.current.addEventListener('mouseleave', function () {\n        setHidden(true);\n      });\n      pathRef.current.addEventListener('mousemove', function (e) {\n        if (!hidden) updateTooltip(e);\n      });\n    }\n  }, [pathRef, svgRef, textRef, hidden]); // build up tip of tooltip\n\n  var bottomRight = (tooltipRect.x + 7).toString() + \",\" + (tooltipRect.y - 10).toString() + \" \" + (tooltipRect.x + 30).toString() + \",\" + tooltipRect.y.toString() + \" \" + (tooltipRect.x + 22).toString() + \",\" + tooltipRect.y.toString();\n  var bottomLeft = (tooltipRect.x + tooltipRect.w - 8).toString() + \",\" + (tooltipRect.y - 10).toString() + \" \" + (tooltipRect.x + tooltipRect.w - 25).toString() + \",\" + tooltipRect.y.toString() + \" \" + (tooltipRect.x + tooltipRect.w - 15).toString() + \",\" + tooltipRect.y.toString();\n  var topRight = (tooltipRect.x + 7).toString() + \",\" + (tooltipRect.y + tooltipRect.h + 10).toString() + \" \" + (tooltipRect.x + 15).toString() + \",\" + (tooltipRect.y + tooltipRect.h).toString() + \" \" + (tooltipRect.x + 7).toString() + \",\" + (tooltipRect.y + tooltipRect.h).toString();\n  var topLeft = (tooltipRect.x + tooltipRect.w - 7).toString() + \",\" + (tooltipRect.y + tooltipRect.h + 10).toString() + \" \" + (tooltipRect.x + tooltipRect.w - 15).toString() + \",\" + (tooltipRect.y + tooltipRect.h).toString() + \" \" + (tooltipRect.x + tooltipRect.w - 7).toString() + \",\" + (tooltipRect.y + tooltipRect.h).toString();\n  var points = tooltipRect.isLeft && tooltipRect.isTop ? topLeft : tooltipRect.isTop ? topRight : tooltipRect.isLeft ? bottomLeft : bottomRight; // render everything\n\n  return React.createElement(\"g\", {\n    pointerEvents: \"none\"\n  }, React.createElement(\"rect\", {\n    x: tooltipRect.x,\n    y: tooltipRect.y,\n    width: tooltipRect.w,\n    rx: 5,\n    ry: 5,\n    height: tooltipRect.h,\n    fill: bgColor,\n    visibility: hidden ? \"hidden\" : \"visible\"\n  }), React.createElement(\"polygon\", {\n    fill: bgColor,\n    visibility: hidden ? \"hidden\" : \"visible\",\n    points: points\n  }), React.createElement(\"text\", {\n    ref: textRef,\n    x: tooltipRect.x + 10,\n    cursor: \"default\",\n    y: tooltipRect.y + tooltipRect.h / 1.66,\n    fontFamily: fontFamily,\n    fontSize: fontSize,\n    fill: textColor,\n    visibility: hidden ? \"hidden\" : \"visible\"\n  }, props.tip));\n};\n\nexport { PathTooltip };","map":{"version":3,"sources":["../src/ReactPathTooltip.tsx"],"names":["PathTooltip","hidden","setHidden","useState","tooltipRect","setTooltipRect","x","y","w","h","isLeft","isTop","fontSize","props","fontFamily","bgColor","textColor","pathRef","svgRef","textRef","React","useEffect","updateTooltip","svgRect","textRect","e","bottomRight","bottomLeft","topRight","topLeft","points","pointerEvents","width","rx","ry","height","fill","visibility","ref","cursor"],"mappings":";;IAaaA,WAAW,GAAqB,SAAhCA,WAAgC,CAAA,KAAA,EAAA;AAE3C;kBAC4BG,QAAQ,CAAA,IAAA,C;MAA7BF,MAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;MAAQC,SAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;;mBACuBC,QAAQ,CAAC;AAAEG,IAAAA,CAAC,EAAH,CAAA;AAAQC,IAAAA,CAAC,EAAT,CAAA;AAAcC,IAAAA,CAAC,EAAf,CAAA;AAAmBC,IAAAA,CAAC,EAApB,CAAA;AAAwBC,IAAAA,MAAM,EAA9B,KAAA;AAAuCC,IAAAA,KAAK,EAAE;AAA9C,GAAD,C;MAAvCP,WAAAA,GAAAA,UAAAA,CAAAA,CAAAA,C;MAAaC,cAAAA,GAAAA,UAAAA,CAAAA,CAAAA,C;;mBACCF,QAAQ,CAAEU,KAAK,CAALA,UAAK,CAALA,IAAF,EAAA,C;MAAtBD,QAAAA,GAAAA,UAAAA,CAAAA,CAAAA,C;;mBACgBT,QAAQ,CAAEU,KAAK,CAALA,YAAK,CAALA,IAAF,YAAA,C;MAAxBC,UAAAA,GAAAA,UAAAA,CAAAA,CAAAA,C;;mBACaX,QAAQ,CAAEU,KAAK,CAALA,SAAK,CAALA,IAAF,OAAA,C;MAArBE,OAAAA,GAAAA,UAAAA,CAAAA,CAAAA,C;;mBACeZ,QAAQ,CAAEU,KAAK,CAALA,WAAK,CAALA,IAAF,OAAA,C;MAAvBG,SAAAA,GAAAA,UAAAA,CAAAA,CAAAA,C;;AACP,MAAMC,OAAO,GAAGJ,KAAK,CAArB,OAAA;AACA,MAAMK,MAAM,GAAGL,KAAK,CAApB,MAAA;AACA,MAAMM,OAAO,GAAGC,KAAK,CAArB,SAAgBA,EAAhB,CAX2C,CAW3C;;AAGAC,EAAAA,SAAS,CAAC,YAAA;AAER,QAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAA,CAAA,EAAA;AACpB,UAAGJ,MAAM,IAANA,OAAAA,IAAAA,OAAAA,IAAgCA,MAAM,CAAtCA,OAAAA,IAAkDD,OAAO,CAAzDC,OAAAA,IAAqEC,OAAO,CAA/E,OAAA,EAAyF;AACvF,YAAMI,OAAO,GAAGL,MAAM,CAANA,OAAAA,CAAhB,qBAAgBA,EAAhB;AACA,YAAMM,QAAQ,GAAGL,OAAO,CAAPA,OAAAA,CAAjB,qBAAiBA,EAAjB;AAEC,YAAMT,MAAM,GAAKe,CAAC,CAADA,CAAAA,GAAMF,OAAO,CAAd,CAACE,GAAoBF,OAAO,CAAPA,KAAAA,GAArC,CAAA;AACA,YAAMZ,KAAK,GAAKc,CAAC,CAADA,CAAAA,GAAMF,OAAO,CAAd,CAACE,GAAoBF,OAAO,CAAPA,MAAAA,GAApC,CAAA;AAED,YAAMf,CAAC,GAAGgB,QAAQ,CAARA,KAAAA,GAAV,EAAA;AACA,YAAMf,CAAC,GAAGe,QAAQ,CAARA,MAAAA,GAAV,EAAA;AACA,YAAMlB,CAAC,GAAII,MAAD,GAAWe,CAAC,CAADA,CAAAA,GAAMF,OAAO,CAAbE,CAAAA,GAAAA,CAAAA,GAAX,CAAA,GAAqCA,CAAC,CAADA,CAAAA,GAAMF,OAAO,CAAbE,CAAAA,GAA/C,CAAA;AACA,YAAMlB,CAAC,GAAII,KAAD,GAAUc,CAAC,CAADA,CAAAA,GAAMF,OAAO,CAAbE,CAAAA,GAAAA,EAAAA,GAAV,CAAA,GAAqCA,CAAC,CAADA,CAAAA,GAAMF,OAAO,CAAbE,CAAAA,GAA/C,CAAA;AAEApB,QAAAA,cAAc,CAAC;AAAEC,UAAAA,CAAC,EAAH,CAAA;AAAQC,UAAAA,CAAC,EAAT,CAAA;AAAcC,UAAAA,CAAC,EAAf,CAAA;AAAoBC,UAAAA,CAAC,EAArB,CAAA;AAA0BC,UAAAA,MAAM,EAAhC,MAAA;AAA0CC,UAAAA,KAAK,EAAEA;AAAjD,SAAD,CAAdN;AACD;AAdH,KAAA;;AAiBA,QAAIY,OAAO,IAAIA,OAAO,CAAtB,OAAA,EAAgC;AAC9BA,MAAAA,OAAO,CAAPA,OAAAA,CAAAA,gBAAAA,CAAAA,WAAAA,EAA8C,YAAA;AAAQf,QAAAA,SAAS,CAATA,KAAS,CAATA;AAAtDe,OAAAA;AACAA,MAAAA,OAAO,CAAPA,OAAAA,CAAAA,gBAAAA,CAAAA,YAAAA,EAA+C,YAAA;AAAQf,QAAAA,SAAS,CAATA,IAAS,CAATA;AAAvDe,OAAAA;AACAA,MAAAA,OAAO,CAAPA,OAAAA,CAAAA,gBAAAA,CAAAA,WAAAA,EAA8C,UAAA,CAAA,EAAA;AAAS,YAAI,CAAJ,MAAA,EAAaK,aAAa,CAAbA,CAAa,CAAbA;AAApEL,OAAAA;AACD;AAvBM,GAAA,EAwBN,CAAA,OAAA,EAAA,MAAA,EAAA,OAAA,EAxBHI,MAwBG,CAxBM,CAATA,CAd2C,CAc3CA;;AA2BA,MAAMK,WAAW,GAAG,CAACtB,WAAW,CAAXA,CAAAA,GAAD,CAAA,EAAA,QAAA,KAAA,GAAA,GAAuC,CAACA,WAAW,CAAXA,CAAAA,GAAD,EAAA,EAAvC,QAAuC,EAAvC,GAAA,GAAA,GAA+E,CAACA,WAAW,CAAXA,CAAAA,GAAD,EAAA,EAA/E,QAA+E,EAA/E,GAAA,GAAA,GAAuHA,WAAW,CAAXA,CAAAA,CAAvH,QAAuHA,EAAvH,GAAA,GAAA,GAAwJ,CAACA,WAAW,CAAXA,CAAAA,GAAD,EAAA,EAAxJ,QAAwJ,EAAxJ,GAAA,GAAA,GAAgMA,WAAW,CAAXA,CAAAA,CAApN,QAAoNA,EAApN;AACA,MAAMuB,UAAU,GAAG,CAACvB,WAAW,CAAXA,CAAAA,GAAgBA,WAAW,CAA3BA,CAAAA,GAAD,CAAA,EAAA,QAAA,KAAA,GAAA,GAAuD,CAACA,WAAW,CAAXA,CAAAA,GAAD,EAAA,EAAvD,QAAuD,EAAvD,GAAA,GAAA,GAA+F,CAACA,WAAW,CAAXA,CAAAA,GAAgBA,WAAW,CAA3BA,CAAAA,GAAD,EAAA,EAA/F,QAA+F,EAA/F,GAAA,GAAA,GAAuJA,WAAW,CAAXA,CAAAA,CAAvJ,QAAuJA,EAAvJ,GAAA,GAAA,GAAwL,CAACA,WAAW,CAAXA,CAAAA,GAAgBA,WAAW,CAA3BA,CAAAA,GAAD,EAAA,EAAxL,QAAwL,EAAxL,GAAA,GAAA,GAAgPA,WAAW,CAAXA,CAAAA,CAAnQ,QAAmQA,EAAnQ;AACA,MAAMwB,QAAQ,GAAG,CAACxB,WAAW,CAAXA,CAAAA,GAAD,CAAA,EAAA,QAAA,KAAA,GAAA,GAAuC,CAACA,WAAW,CAAXA,CAAAA,GAAgBA,WAAW,CAA3BA,CAAAA,GAAD,EAAA,EAAvC,QAAuC,EAAvC,GAAA,GAAA,GAA+F,CAACA,WAAW,CAAXA,CAAAA,GAAD,EAAA,EAA/F,QAA+F,EAA/F,GAAA,GAAA,GAAuI,CAACA,WAAW,CAAXA,CAAAA,GAAgBA,WAAW,CAA5B,CAAA,EAAvI,QAAuI,EAAvI,GAAA,GAAA,GAA0L,CAACA,WAAW,CAAXA,CAAAA,GAAD,CAAA,EAA1L,QAA0L,EAA1L,GAAA,GAAA,GAAiO,CAACA,WAAW,CAAXA,CAAAA,GAAeA,WAAW,CAA3B,CAAA,EAAlP,QAAkP,EAAlP;AACA,MAAMyB,OAAO,GAAG,CAACzB,WAAW,CAAXA,CAAAA,GAAgBA,WAAW,CAA3BA,CAAAA,GAAD,CAAA,EAAA,QAAA,KAAA,GAAA,GAAuD,CAACA,WAAW,CAAXA,CAAAA,GAAgBA,WAAW,CAA3BA,CAAAA,GAAD,EAAA,EAAvD,QAAuD,EAAvD,GAAA,GAAA,GAA+G,CAACA,WAAW,CAAXA,CAAAA,GAAgBA,WAAW,CAA3BA,CAAAA,GAAD,EAAA,EAA/G,QAA+G,EAA/G,GAAA,GAAA,GAAuK,CAACA,WAAW,CAAXA,CAAAA,GAAeA,WAAW,CAA3B,CAAA,EAAvK,QAAuK,EAAvK,GAAA,GAAA,GAAyN,CAACA,WAAW,CAAXA,CAAAA,GAAgBA,WAAW,CAA3BA,CAAAA,GAAD,CAAA,EAAzN,QAAyN,EAAzN,GAAA,GAAA,GAAgR,CAACA,WAAW,CAAXA,CAAAA,GAAgBA,WAAW,CAA5B,CAAA,EAAhS,QAAgS,EAAhS;AACA,MAAM0B,MAAM,GAAI1B,WAAW,CAAXA,MAAAA,IAAsBA,WAAW,CAAlC,KAACA,GAAD,OAACA,GAAsDA,WAAW,CAAZ,KAACA,GAAD,QAACA,GAAiCA,WAAW,CAAZ,MAACA,GAAD,UAACA,GAAvG,WAAA,CA7C2C,CA6C3C;;AAGA,SACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAG2B,IAAAA,aAAa,EAAE;AAAlB,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAMzB,IAAAA,CAAC,EAAEF,WAAW,CAACE,CAArB;AAAwBC,IAAAA,CAAC,EAAEH,WAAW,CAACG,CAAvC;AAA0CyB,IAAAA,KAAK,EAAE5B,WAAW,CAACI,CAA7D;AAAgEyB,IAAAA,EAAE,EAAE,CAApE;AAAuEC,IAAAA,EAAE,EAAE,CAA3E;AAA8EC,IAAAA,MAAM,EAAE/B,WAAW,CAACK,CAAlG;AAAqG2B,IAAAA,IAAI,EAAErB,OAA3G;AAAoHsB,IAAAA,UAAU,EAAGpC,MAAM,GAAA,QAAA,GAAc;AAArJ,GAAA,CADF,EAEE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAASmC,IAAAA,IAAI,EAAErB,OAAf;AAAwBsB,IAAAA,UAAU,EAAGpC,MAAM,GAAA,QAAA,GAAc,SAAzD;AAAqE6B,IAAAA,MAAM,EAAEA;AAA7E,GAAA,CAFF,EAGE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAMQ,IAAAA,GAAG,EAAEnB,OAAX;AAAoBb,IAAAA,CAAC,EAAEF,WAAW,CAAXA,CAAAA,GAAgB,EAAvC;AAA2CmC,IAAAA,MAAM,EAAE,SAAnD;AAA8DhC,IAAAA,CAAC,EAAEH,WAAW,CAAXA,CAAAA,GAAgBA,WAAW,CAAXA,CAAAA,GAAc,IAA/F;AAAqGU,IAAAA,UAAU,EAAEA,UAAjH;AAA6HF,IAAAA,QAAQ,EAAEA,QAAvI;AAAiJwB,IAAAA,IAAI,EAAEpB,SAAvJ;AAAkKqB,IAAAA,UAAU,EAAGpC,MAAM,GAAA,QAAA,GAAc;AAAnM,GAAA,EACGY,KAAK,CALZ,GAII,CAHF,CADF;AASD,C","sourcesContent":["import React, { useState, useEffect } from 'react'\n\ninterface IProps {\n  tip: string,\n  pathRef: React.RefObject<SVGElement>,\n  svgRef: React.RefObject<SVGSVGElement>,\n  minWidth?: number,\n  fontSize?: number,\n  fontFamily?: string,\n  bgColor?: string,\n  textColor?: string\n}\n\nexport const PathTooltip: React.FC<IProps> = (props) => {\n\n  // set initial state\n  const [hidden, setHidden] = useState(true)\n  const [tooltipRect, setTooltipRect] = useState({ x: 0, y: 0, w:0, h:0, isLeft: false, isTop: false })\n  const [fontSize, ] = useState (props[\"fontSize\"] || 12)\n  const [fontFamily, ] = useState (props[\"fontFamily\"] || \"sans-serif\")\n  const [bgColor, ] = useState (props[\"bgColor\"] || \"black\")\n  const [textColor, ] = useState (props[\"textColor\"] || \"white\")\n  const pathRef = props.pathRef\n  const svgRef = props.svgRef\n  const textRef = React.createRef<SVGTextElement>()\n\n  // use effect to handle mouse over and mouse leave\n  useEffect(() => {\n\n    const updateTooltip = (e:MouseEvent) => {\n      if(svgRef && pathRef && textRef && svgRef.current && pathRef.current && textRef.current) {\n        const svgRect = svgRef.current.getBoundingClientRect()\n        const textRect = textRef.current.getBoundingClientRect()\n\n         const isLeft = ((e.x - svgRect.x) > (svgRect.width / 2))\n         const isTop = ((e.y - svgRect.y) > (svgRect.height / 2))\n\n        const w = textRect.width + 20\n        const h = textRect.height + 20\n        const x = (isLeft) ? e.x - svgRect.x + 8 - w : e.x - svgRect.x - 8\n        const y = (isTop) ? e.y - svgRect.y - 12 - h : e.y - svgRect.y + 8\n\n        setTooltipRect({ x: x, y: y, w: w, h: h, isLeft: isLeft, isTop: isTop })\n      }\n    }\n\n    if (pathRef && pathRef.current) {\n      pathRef.current.addEventListener('mouseover', () => { setHidden(false) })\n      pathRef.current.addEventListener('mouseleave', () => { setHidden(true) })\n      pathRef.current.addEventListener('mousemove', (e) => { if (!hidden) updateTooltip(e) })\n    }\n  }, [pathRef, svgRef, textRef, hidden])\n\n  // build up tip of tooltip\n  const bottomRight = (tooltipRect.x + 7).toString() + \",\" + (tooltipRect.y - 10).toString() + \" \" + (tooltipRect.x + 30).toString() + \",\" + tooltipRect.y.toString() + \" \" + (tooltipRect.x + 22).toString() + \",\" + tooltipRect.y.toString()\n  const bottomLeft = (tooltipRect.x + tooltipRect.w - 8).toString() + \",\" + (tooltipRect.y - 10).toString() + \" \" + (tooltipRect.x + tooltipRect.w - 25).toString() + \",\" + tooltipRect.y.toString() + \" \" + (tooltipRect.x + tooltipRect.w - 15).toString() + \",\" + tooltipRect.y.toString()\n  const topRight = (tooltipRect.x + 7).toString() + \",\" + (tooltipRect.y + tooltipRect.h + 10).toString() + \" \" + (tooltipRect.x + 15).toString() + \",\" + (tooltipRect.y + tooltipRect.h).toString() + \" \" + (tooltipRect.x + 7).toString() + \",\" + (tooltipRect.y +tooltipRect.h).toString()\n  const topLeft = (tooltipRect.x + tooltipRect.w - 7).toString() + \",\" + (tooltipRect.y + tooltipRect.h + 10).toString() + \" \" + (tooltipRect.x + tooltipRect.w - 15).toString() + \",\" + (tooltipRect.y +tooltipRect.h).toString() + \" \" + (tooltipRect.x + tooltipRect.w - 7).toString() + \",\" + (tooltipRect.y + tooltipRect.h).toString()\n  const points = (tooltipRect.isLeft && tooltipRect.isTop) ? topLeft : (tooltipRect.isTop) ? topRight : (tooltipRect.isLeft) ? bottomLeft : bottomRight \n\n  // render everything\n  return (\n    <g pointerEvents={\"none\"} >\n      <rect x={tooltipRect.x} y={tooltipRect.y} width={tooltipRect.w} rx={5} ry={5} height={tooltipRect.h} fill={bgColor} visibility={(hidden ? \"hidden\" : \"visible\")} />\n      <polygon fill={bgColor} visibility={(hidden ? \"hidden\" : \"visible\")} points={points} />\n      <text ref={textRef} x={tooltipRect.x + 10} cursor={\"default\"} y={tooltipRect.y + tooltipRect.h/1.66} fontFamily={fontFamily} fontSize={fontSize} fill={textColor} visibility={(hidden ? \"hidden\" : \"visible\")}>\n        {props.tip}\n      </text>\n    </g>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}