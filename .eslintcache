[{"/home/pranava/Desktop/network_visualiser/src/index.js":"1","/home/pranava/Desktop/network_visualiser/src/App.js":"2","/home/pranava/Desktop/network_visualiser/src/reportWebVitals.js":"3","/home/pranava/Desktop/network_visualiser/src/MapChart.js":"4","/home/pranava/Desktop/network_visualiser/src/component/data/data.js":"5","/home/pranava/Desktop/network_visualiser/src/Bar.js":"6","/home/pranava/Documents/network_visualiser/src/index.js":"7","/home/pranava/Documents/network_visualiser/src/App.js":"8","/home/pranava/Documents/network_visualiser/src/Bar.js":"9","/home/pranava/Documents/network_visualiser/src/reportWebVitals.js":"10","/home/pranava/Documents/network_visualiser/src/MapChart.js":"11","/home/pranava/Documents/network_visualiser/src/component/data/data.js":"12"},{"size":325,"mtime":1608820486141,"results":"13","hashOfConfig":"14"},{"size":375,"mtime":1608817669022,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1608716923122,"results":"16","hashOfConfig":"14"},{"size":2211,"mtime":1608820209513,"results":"17","hashOfConfig":"14"},{"size":864,"mtime":1608817335833,"results":"18","hashOfConfig":"14"},{"size":1250,"mtime":1608820264646,"results":"19","hashOfConfig":"14"},{"size":325,"mtime":1608820486141,"results":"20","hashOfConfig":"21"},{"size":375,"mtime":1608817669022,"results":"22","hashOfConfig":"21"},{"size":1250,"mtime":1608820264646,"results":"23","hashOfConfig":"21"},{"size":362,"mtime":1608716923122,"results":"24","hashOfConfig":"21"},{"size":2211,"mtime":1608820209513,"results":"25","hashOfConfig":"21"},{"size":864,"mtime":1608817335833,"results":"26","hashOfConfig":"21"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11ve8xi",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1mi8gxf",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pranava/Desktop/network_visualiser/src/index.js",[],"/home/pranava/Desktop/network_visualiser/src/App.js",[],"/home/pranava/Desktop/network_visualiser/src/reportWebVitals.js",[],["54","55"],"/home/pranava/Desktop/network_visualiser/src/MapChart.js",["56"],"/home/pranava/Desktop/network_visualiser/src/component/data/data.js",[],"/home/pranava/Desktop/network_visualiser/src/Bar.js",[],"/home/pranava/Documents/network_visualiser/src/index.js",[],["57","58"],"/home/pranava/Documents/network_visualiser/src/App.js",[],"/home/pranava/Documents/network_visualiser/src/Bar.js",[],"/home/pranava/Documents/network_visualiser/src/reportWebVitals.js",[],"/home/pranava/Documents/network_visualiser/src/MapChart.js",["59"],"import React, { memo } from \"react\";\nimport { networkData } from \"./component/data/data\";\nimport \"./MapChart.css\";\n\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n  Marker\n} from \"react-simple-maps\";\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst MapChart = ({ setTooltipContent }) => {\n  return (\n    <ComposableMap data-tip=''>\n      <ZoomableGroup center={[0, 0]}>\n        <Geographies geography={geoUrl}>\n          {({ geographies }) =>\n            geographies.map(geography => (\n              <Geography \n                key={geography.rsmKey} \n                geography={geography}\n                fill=\"#DDD\"\n                stroke=\"#FFF\"\n              />\n            ))\n          }\n        </Geographies>\n\n        {networkData.map((data, key) => {\n          var radius;\n          var fillcolor = \"#bbe0f9\";\n          var strokeColor = \"#6dc0fd\"\n\n            {\n              if(data.data<100){\n                radius = 7;\n              }else if(data.data>=100 && data.data<300){\n                radius = 10;\n                fillcolor = \"#99c2ff\";\n                strokeColor = \"#5b92fe\";\n              } else if(data.data>=300 && data.data<500){\n                radius = 14;\n                fillcolor = \"#9cb3e3\";\n                strokeColor = \"#6154cb\";\n\n              }else if(data.data>500){\n                radius = 20;\n                fillcolor = \"#8080ff\";\n                strokeColor = \"#000099\";\n\n              }\n            }\n\n            return (\n              <Marker\n              key = {key}\n              coordinates={data.coordinate}\n              onMouseEnter={() => {\n                setTooltipContent(\"Location: \"+ data.region + \" |  Data Usage: \"+ data.data);\n              }}\n              onMouseLeave={() => {\n                setTooltipContent(\"\");\n              }}\n            >\n              <circle\n                r={radius}\n                fill = {fillcolor}\n                stroke = {strokeColor}            \n              />\n            </Marker>\n            );\n        })}\n        \n      </ZoomableGroup>\n    </ComposableMap>\n  );\n};\n\nexport default memo(MapChart);\n","/home/pranava/Documents/network_visualiser/src/component/data/data.js",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":38,"column":13,"nodeType":"66","messageId":"67","endLine":56,"endColumn":14},{"ruleId":"60","replacedBy":"68"},{"ruleId":"62","replacedBy":"69"},{"ruleId":"64","severity":1,"message":"65","line":38,"column":13,"nodeType":"66","messageId":"67","endLine":56,"endColumn":14},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",["70"],["71"],"no-global-assign","no-unsafe-negation"]